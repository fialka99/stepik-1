#include <iostream>
#include <string>
#include <fstream>
#include <chrono>
#include <stack>

using namespace std;
using namespace chrono;

// laba 1

void Lab1(); // 1 пр
struct Student {
	string full_name; // Фамилия Имя Отчество
	string sex;         // Пол: M/W
	int group;        // Номер группы
	int id;           // Номер студента в списке 
	int grades[8];    // Оценки за экзамены и диф. зачёты

};
void printTask();
void Change(struct Student* students);
void printStudent(struct Student* students, int i);
void print(struct Student*);
void printGroup(struct Student* students);
void printBestStudent(struct Student* students);
void printMaleFemale(struct Student* students);
void printOtchet(struct Student* students);
void print_nomerStudenta(struct Student* students);
const int SIZE = 10;

void Lab2(); //2 пр

struct Node {

    int val;
    Node* next;
    Node* prev;
    Node(int _val) :val(_val), next(nullptr), prev(nullptr) {}

};

struct list
{
    Node* first;
    Node* last;
    list() : first(nullptr), last(nullptr) {}

    bool is_empty()
    {
        return(first == nullptr);
    }
    void pushBack(int _val) {
        Node* ptr = new Node(_val);
        if (is_empty()) {
            first = ptr;
            last = ptr;
            return;
        }
        last->next = ptr;
        ptr->prev = last;
        last = ptr;
    }
    void push(int _val, int ind) {
        if (is_empty()) {
            pushBack(_val);
            return;
        }
        Node* ptr = new Node(_val);
        Node* cur = first;
        for (int i = 0; i < ind - 1; i++) {
            cur = cur->next;
        }
        ptr->next = cur->next;
        cur->next->prev = ptr;
        ptr->prev = cur;
        cur->next = ptr;

    }
    void printForward() {
        if (is_empty()) {
            cout << "Список пуст. Печать невозможна." << std::endl;
            return;
        }
        Node* ptr = first;
        while (ptr) {
            cout << ptr->val << " ";
            ptr = ptr->next;
        }
        cout << endl;
    }


    void removeFirst() {
        if (is_empty()) {
            std::cout << "Список пуст. Удаление невозможно." << std::endl;
            return;
        }
        Node* ptr = first;
        first = ptr->next;
        first->prev = nullptr;
        delete ptr;
    }

    void removeLast() {
        if (is_empty()) {
            std::cout << "Список пуст. Удаление невозможно." << std::endl;
            return;
        }
        Node* ptr = last;
        last = ptr->prev;
        last->next = nullptr;
        delete ptr;
    }
    void removeVal(int _val) {
        if (is_empty()) {
            cout << "Список пуст. Удаление невозможно." << std::endl;
            return;
        }
        if (first->val == _val) {
            removeFirst();
            return;
        }
        if (last->val == _val) {
            removeLast();
            return;
        }
        Node* slow = first;
        Node* fast = slow->next;
        while (fast && fast->val != _val) {
            slow = fast;
            fast = fast->next;
        }
        if (!fast) {
            std::cout << "Ваш элемент отсутствует в списке." << std::endl;
            return;
        }
        slow->next = fast->next;
        fast->next->prev = slow;
        delete fast;
        std::cout << "Элемент удалён. Новый список:" << std::endl;
        printForward();
    }

    void removeInd(int ind)
    {
        if (is_empty()) {
            cout << "Список пуст. Удаление невозможно." << endl;
            return;
        }
        if (ind == 0)
        {
            removeFirst();
            return;
        }
        Node* cur = first;
        for (int i = 0; i < ind; i++)
        {

            cur = cur->next;

        }
        if (!cur)
        {
            cout << "Индекс вышел за пределы списка.Удаление невозможно" << endl;
            return;
        }
        if (cur->next == nullptr)
        {
            cur->prev->next = nullptr;
            delete cur;
            cout << "элемент удален.Новый список: " << endl;
            printForward();
            return;

        }
        cur->prev->next = cur->next;
        cur->next->prev = cur->prev;
        cout << "элемент удален.Новый список:" << endl;
        printForward();


    }

    void swap(int ind1, int ind2) {
        if (is_empty()) {
            cout << "Список пуст." << endl;
            return;
        }
        if (first == last) {
            return;
        }
        Node* t1 = first;
        for (int i = 0; i < ind1; i++) {
            if (t1->next == nullptr) {
                cout << "Индекс " << ind1 << " выходит за пределы списка." << endl;
                return;
            }
            t1 = t1->next;
        }
        Node* t2 = first;
        for (int i = 0; i < ind2; i++) {
            if (t2->next == nullptr) {
                cout << "Индекс " << ind2 << " выходит за пределы списка." << endl;
                return;
            }
            t2 = t2->next;
        }
        Node* val1 = new Node(t1->val);
        Node* val2 = new Node(t2->val);
        t1->val = val2->val;
        t2->val = val1->val;
        delete val1;
        delete val2;
        cout << "Элементы поменяли местами. Новый список:" << endl;
        printForward();
    }

    void get_val(int _val)
    {
        if (is_empty()) {
            cout << "Список пуст." << endl;
            return;
        }
        int ind = 0;
        Node* ptr = first;
        do
        {
            if (ptr->val == _val)
            {
                cout << "Индекс равен:" << ind;
                return;

            }
            ind++;
            ptr = ptr->next;



        } while (ptr->next != nullptr);

        cout << "Вашего элемента нет в списке" << endl;


    }

    void get_ind(int ind)
    {
        if (is_empty()) {
            cout << "Список пуст." << endl;
            return;
        }
        Node* ptr = first;
        int test = 0;
        for (int i = 0; i < ind; i++) {
            if (ptr->next != nullptr) {
                ptr = ptr->next;
                test += 1;
            }
        }
        if (test != ind) {
            cout << "Ваш индекс выходит за пределы списка." << endl;
            return;
        }
        cout << "Значение по вашему индексу - " << ptr->val << "." << endl;
    }






};

// 1.   Формирование двусвязного списка размерности N, где:
    // a) пользователь вводит количество элементов в списке, который будет автоматически заполняться случайными числами (0 до 99);
    // б) пользователь вводит в консоль элементы списка, N определяется автоматически по количеству введенных элементов;
// 2.   Определение скорости создания двусвязного списка п. 2.
    // 3.   Вставка, удаление, обмен и получение элемента двусвязного списка. Удаление и получение элемента необходимо реализовать по индексу и по значению.
    // 4.   Определение скорости вставки, удаление и получения элемента двусвязного списка п. 3.




list task1a();
list task1b();
list task1();
list task3(list l);
list bublesort(list l);
int* createDynArr();



void Lab3();
class Stack 
{
private:
	struct Node 
	{
		char val;
		Node* next;
		Node(char _val) : val(_val), next(nullptr) {}
	};
	Node* root;
public:
	Stack() : root(nullptr) {}

	bool empty() 
	{
		return root == nullptr;
	}

	void push(int _val)
	{
		Node* newnode = new Node(_val);
		newnode->next = root;
		root = newnode;
	}

	void pop() 
	{
		if (empty())
			return;
		else {
			Node* delnode = root;
			root = root->next;
			delete delnode;
		}
	}

	char top()
	{
		return root->val;
	}
};

int pr(char ch) 
{
	switch (ch) {
	case '(': return 1;
	case '+': case '-': return 2;
	case '*': case '/': return 3;
	default: return 0;
	}
}

string int_to_str(int num)
{
	string rev_str = "";
	do 
	{
		rev_str += char(num % 10 + 48);
		num /= 10;
	} while (num != 0);

	int len = rev_str.length();
	string str = "";
	for (int i = 0; i < len; i++) 
	{
		str += rev_str[len - 1 - i];
	}

	return str;
}

int st(int a, int p)
{
	int answer = 1;
	for (int i = 0; i < p; i++) 
	{
		answer *= a;
	}
	return answer;
}

int str_to_int(string str)
{
	int num = 0;
	int len = str.length();
	for (int i = 0; i < len; i++) 
	{
		num += st(10, len - i - 1) * (int(str[i]) - 48);
	}
	return num;
}

int calcValue(string str, string vars, int* arr)
{
	int answer = 0;
	int len = str.length();
	int var_count = 0;
	for (int i = 0; i < len; i++)
	{
		if (pr(str[i]) == 0 && !isdigit(str[i])) 
		{
			var_count++;
		}
	}

	if (var_count != 0)
	{
		int p = 0;
		int i = 0;
		do {
			if (pr(str[i]) == 0 && !isdigit(str[i]))
			{
				str.replace(i, 1, int_to_str(arr[vars.find(str[i])])); // заменяем переменные на числа
				p++;
			}
			i++;
		} while (p != var_count);
	}
	// далее следует написать калькулятор для выражений без скобок
	len = str.length();
	int plus_count = 0, minus_count = 0, umnozh_count = 0, razdel_count = 0;
	for (int i = 0; i < len; i++) 
	{
		if (pr(str[i]) != 0) 
		{
			if (str[i] == '+')
				plus_count++;
			else if (str[i] == '-')
				minus_count++;
			else if (str[i] == '*')
				umnozh_count++;
			else if (str[i] == '/')
				razdel_count++;
		}
	}
	int pr2_count = plus_count + minus_count;
	int pr3_count = umnozh_count + razdel_count;
	while (pr3_count) {
		len = str.length();
		int left, right;
		for (int i = 0; i < len; i++) 
		{
			if (pr(str[i]) == 3) {
				left = i;
				right = i;
				while (true) {
					if (left - 1 >= 0)
					{
						if (isdigit(str[left - 1]))
						{
							left--;
						}
						else
							break;
					}
					else
						break;
				}
				while (true) {
					if (right + 1 < len)
					{
						if (isdigit(str[right + 1])) 
						{
							right++;
						}
						else
							break;
					}
					else
						break;
				}
				// на данном шаге мы имеем левый и правый индекс бинарного выражения
				int local_answer_int = 0;
				string l_str = "";
				for (int j = left; j < i; j++)
				{
					l_str += str[j];
				}
				int l_int = str_to_int(l_str);
				string r_str = "";
				for (int j = i + 1; j < right + 1; j++)
				{
					r_str += str[j];
				}
				int r_int = str_to_int(r_str);
				switch (str[i])
				{
				case '*':
					local_answer_int = l_int * r_int;
					break;
				case '/':
					local_answer_int = l_int / r_int;
					break;
				}
				string local_answer_str = int_to_str(local_answer_int);
				str.replace(left, right - left + 1, local_answer_str);
				pr3_count--;
				break;
			}
		}
	}
	while (pr2_count) 
	{
		len = str.length();
		int left, right;
		for (int i = 0; i < len; i++)
		{
			if (pr(str[i]) == 2)
			{
				left = i;
				right = i;
				while (true) {
					if (left - 1 >= 0)
					{
						if (isdigit(str[left - 1])) 
						{
							left--;
						}
						else
							break;
					}
					else
						break;
				}
				while (true) 
				{
					if (right + 1 < len)
					{
						if (isdigit(str[right + 1]))
						{
							right++;
						}
						else
							break;
					}
					else
						break;
				}
				// на данном шаге мы имеем левый и правый индекс бинарного выражения
				int local_answer_int = 0;
				string l_str = "";
				for (int j = left; j < i; j++)
				{
					l_str += str[j];
				}
				int l_int = str_to_int(l_str);
				string r_str = "";
				for (int j = i + 1; j < right + 1; j++)
				{
					r_str += str[j];
				}
				int r_int = str_to_int(r_str);
				switch (str[i]) {
				case '+':
					local_answer_int = l_int + r_int;
					break;
				case '-':
					local_answer_int = l_int - r_int;
					break;
				}
				string local_answer_str = int_to_str(local_answer_int);
				str.replace(left, right - left + 1, local_answer_str);
				pr2_count--;
				break;
			}
		}
	}
	answer = str_to_int(str);
	return answer;
}

int calc(string str)
{
	int answer = 0;
	int len = str.length();
	int brackets_count = 0;
	string vars = ""; // строка с соответствующими переменными

	for (int i = 0; i < len; i++)
	{ // считаем количество выражений в скобках
		if (str[i] == '(')
			brackets_count++;
	}
	int* arr_val = new int[brackets_count]; // массив со значениями внутри скобок

	for (int i = 0; i < brackets_count; i++)
	{ // раскрываем скобки
		int right = str.find(')'); // находим индекс закрывающей скобки
		int left;
		for (left = right; str[left] != '('; left--); // находим индекс открывающей скобки
		string inside = "";
		for (int j = left + 1; j < right; j++) { // в строку inside добавляем внутреннее содержимое скобок
			inside += str[j];
		}
		arr_val[i] = calcValue(inside, vars, arr_val);
		string str_var = "0";
		str_var[0] = char(65 + i);
		str.replace(left, right - left + 1, str_var); // заменяем скобки переменными
		vars += char(65 + i);

	}

	//example: 7+X-Y, где Y = 5+Z, где Z = 7-W
	answer = calcValue(str, vars, arr_val);

	delete[] arr_val;

	return answer;
}

string initializing(std::string str)
{
	int len = str.length();
	for (int i = 0; i < len; i++) 
	{
		if (pr(str[i]) == 0) {
			if (!isdigit(str[i]) && str[i] != ')')
			{
				char value;
				const char var = str[i];
				std::cout << str[i] << " = ";
				std::cin >> value;
				bool in = true;

				while (in) {
					int ind = str.find(var);
					if (ind >= 0 && ind <= len)
					{
						str[ind] = value;
					}
					else
						in = false;
				}
			}
		}
	}
	return str;
}

string RPN(std::string input) 
{
	Stack st;
	cout << "Строим ОПЗ:";
	string output;
	cout << endl;
	int len = input.length();

	for (int i = 1; i < len; i++) 
	{ // проверка на корректность ввода
		if (input[i] != ')' && input[i - 1] != ')' && pr(input[i - 1]) == 0) {
			if (pr(input[i]) == pr(input[i - 1])) {
				cout << "Invalid input";
				return "";
			}
		}
	}

	int operand_count = 0, operation_count = 0;

	for (int i = 0; i < len; i++) {
		if (pr(input[i]) == 0 && input[i] != ')')
		{ // встречается операнд
			if (input[i] == ' ') 
			{ // проверка на корректность ввода
				cout << "Invalid input";
				return "";
			}
			cout << "'" << input[i] << "' - переменная. Помещаем её в строку." << endl;
			operand_count++;
			output += input[i];
			cout << "Строка: " << output << endl;
		}

		else if (pr(input[i]) == 1)
		{ // встречается '('
			cout << "'(' - открывающая скобка. Помещаем в стек." << endl;
			st.push(input[i]);
		}

		else if (input[i] == ')')
		{ // встречается ')'
			cout << "')' - закрывающая скобка. Извлекаем из стека в строку все символы до открывающейся скобки. Уничтожаем обе скобки." << endl;
			do {
				output += st.top();
				cout << "Строка: " << output << endl;
				st.pop();
			} while (st.top() != '(');
			st.pop();
		}

		else 
		{ // встречаются '+', '-', '*', '/'
			operation_count++;
			if (st.empty())
			{ // если стек пуст
				cout << "'" << input[i] << "' - операция (приоритет " << pr(input[i]) << "). Стек пуст. Помещаем в стек." << endl;
				st.push(input[i]);
			}

			else if (pr(st.top()) < pr(input[i]))
			{ // если приоритет данной операции больше приоритета вершины стека
				cout << "'" << input[i] << "' - операция (приоритет " << pr(input[i]) << "). Проверяем стек: на вершине символ '" << st.top() << "' (приоритет " << pr(st.top()) << "). Помещаем символ '" << input[i] << "' в стек." << endl;
				st.push(input[i]);
			}

			else { // если приоритет данной операции НЕ больше приоритета вершины стека
				cout << "'" << input[i] << "' - операция (приоритет " << pr(input[i]) << "). Проверяем стек: на вершине символ '" << st.top() << "' (приоритет " << pr(st.top()) << ").\nИзвлекаем символы из стека в строку, пока приоритет данной операции не больше приоритета операции на вершине стека." << endl;
				while (pr(st.top()) >= pr(input[i])) {
					output += st.top();
					cout << "Строка: " << output << endl;
					st.pop();
					if (st.empty())
						break;
				}
				if (st.empty())
					cout << "Стек пуст. Помещаем символ '" << input[i] << "' в стек." << endl;
				else
					cout << "Проверяем стек: на вершине символ '" << st.top() << "' (приоритет " << pr(st.top()) << "). Помещаем символ '" << input[i] << "' в стек." << endl;
				st.push(input[i]);
			}
		}
	}

	cout << "Выражение прочитано." << endl;
	if (!st.empty()) 
	{ // если в стеке остались знаки операций
		cout << "Проверяем стек. В стеке есть операции. Заносим операции в строку." << endl;
		while (pr(st.top())) {
			output += st.top();
			cout << "Строка: " << output << endl;
			st.pop();
			if (st.empty())
				break;
		}
	}
	cout << endl << "ОПЗ построена:" << endl;

	if (operand_count - 1 == operation_count && operation_count != 0)
	{ // проверка на корректность ввода
		cout << output << endl;
		string new_output = initializing(output);
		if (new_output != output) {
			cout << new_output << endl << endl;
			return new_output;
		}
		return output;
	}
	else 
	{
		cout << "Invalid input" << endl;
		return "";
	}
}

int calcRPN(string str)
{
	stack<int> st;
	str = initializing(str);
	int len = str.length();

	for (int i = 0; i < len; i++) {
		if (pr(str[i]) == 0) {
			int num = int(str[i]) - 48;
			st.push(num);
		}
		else if (pr(str[i]) > 1) {
			switch (pr(str[i])) {
			case 2:
				if (str[i] == '+') {
					int right = st.top();
					st.pop();
					int left = st.top();
					st.pop();
					st.push(left + right);
					break;
				}
				else if (str[i] == '-') {
					int right = st.top();
					st.pop();
					int left = st.top();
					st.pop();
					st.push(left - right);
					break;
				}
			case 3:
				if (str[i] == '*') {
					int right = st.top();
					st.pop();
					int left = st.top();
					st.pop();
					st.push(left * right);
					break;
				}
				else if (str[i] == '/') {
					int right = st.top();
					st.pop();
					int left = st.top();
					st.pop();
					st.push(left / right);
					break;
				}
			}
		}
	}
	return st.top();
}

string PN(string input) {
	cout << "Строим ПЗ:" << endl;
	input = initializing(input);
	cout << "Переворачиваем:" << endl;
	reverse(input.begin(), input.end());
	cout << input << endl;
	int len = input.length();
	cout << "Разворачиваем скобки:" << endl;
	for (int i = 0; i < len; i++) {
		if (input[i] == ')') {
			input[i] = '[';
		}
		else if (input[i] == '(') {
			input[i] = ']';
		}
	}
	for (int i = 0; i < len; i++) {
		if (input[i] == ']') {
			input[i] = ')';
		}
		else if (input[i] == '[') {
			input[i] = '(';
		}
	}
	cout << input << endl;
	input = RPN(input);
	cout << "Переворачиваем." << endl;
	reverse(input.begin(), input.end());
	cout << endl << "ПЗ построена:" << endl << input << endl;
	return input;
}

int calcPN(string str) {
	reverse(str.begin(), str.end());
	stack <int> st;
	str = initializing(str);
	int len = str.length();

	for (int i = 0; i < len; i++) {
		if (pr(str[i]) == 0) {
			int num = int(str[i]) - 48;
			st.push(num);
		}
		else if (pr(str[i]) > 1) {
			switch (pr(str[i])) {
			case 2:
				if (str[i] == '+') {
					int right = st.top();
					st.pop();
					int left = st.top();
					st.pop();
					st.push(left + right);
					break;
				}
				else if (str[i] == '-') {
					int right = st.top();
					st.pop();
					int left = st.top();
					st.pop();
					st.push(right - left);
					break;
				}
			case 3:
				if (str[i] == '*') {
					int right = st.top();
					st.pop();
					int left = st.top();
					st.pop();
					st.push(left * right);
					break;
				}
				else if (str[i] == '/') {
					int right = st.top();
					st.pop();
					int left = st.top();
					st.pop();
					st.push(right / left);
					break;
				}
			}
		}
	}
	return st.top();
}



int main()
{
	setlocale(0, "");
	cout << "\t\t\t\t\t   Курсовая работа\n\n";

	int lab_num = 0;
	do {
		if (lab_num == 0) {
			do {
				cout << "Выберите номер практической работы (для завершения работы программы напишите 0): ";
				cin >> lab_num;
			} while (lab_num < 0 || lab_num > 4);
		}
		if (lab_num == 0)
			break;

		switch (lab_num) {
		case 1:
			cout << "\n\n\t\t\tПрактическая работа 1\n\n";
			Lab1();
			break;
		case 2:
			cout << "\n\n\t\t\tПрактическая работа 2\n\n";
			Lab2();
			break;
		case 3:
			cout << "\n\n\t\t\tПрактическая работа 3\n\n";
			Lab3();
			break;
		
		}

		do {
			cout << "\nВыберите номер практической работы (для завершения работы программы напишите 0): ";
			cin >> lab_num;
		} while (lab_num < 0 || lab_num > 4);
	} while (lab_num);
	return 0;
}

void Lab1()
{
	cout << sizeof(Student) << endl;
	setlocale(0, " ");


	
	struct Student students[SIZE];

	students[0].full_name = "Аксенов Семен Ярикович";
	students[0].sex = "M";
	students[0].group = 2121;
	students[0].id = 1;
	students[0].grades[0] = 5;
	students[0].grades[1] = 4;
	students[0].grades[2] = 4;
	students[0].grades[3] = 5;
	students[0].grades[4] = 4;
	students[0].grades[5] = 4;
	students[0].grades[6] = 4;
	students[0].grades[7] = 4;

	//2 студент
	students[1].full_name = "Валуев Артем Марсович";
	students[1].sex = "M";
	students[1].group = 2223;
	students[1].id = 2;
	students[1].grades[0] = 4;
	students[1].grades[1] = 3;
	students[1].grades[2] = 4;
	students[1].grades[3] = 3;
	students[1].grades[4] = 4;
	students[1].grades[5] = 4;
	students[1].grades[6] = 3;
	students[1].grades[7] = 5;

	//3 студент
	students[2].full_name = "Шакурова Аделина Викторовна";
	students[2].sex = "W";
	students[2].group = 2431;
	students[2].id = 3;
	students[2].grades[0] = 5;
	students[2].grades[1] = 3;
	students[2].grades[2] = 4;
	students[2].grades[3] = 5;
	students[2].grades[4] = 4;
	students[2].grades[5] = 3;
	students[2].grades[6] = 4;
	students[2].grades[7] = 4;

	//4 студент
	students[3].full_name = "Криштиану Роналду";
	students[3].sex = "M";
	students[3].group = 2221;
	students[3].id = 7;
	students[3].grades[0] = 3;
	students[3].grades[1] = 3;
	students[3].grades[2] = 3;
	students[3].grades[3] = 3;
	students[3].grades[4] = 3;
	students[3].grades[5] = 5;
	students[3].grades[6] = 3;
	students[3].grades[7] = 5;

	//5 студент
	students[4].full_name = "Лионеля Месси";
	students[4].sex = "M";
	students[4].group = 2565;
	students[4].id = 10;
	students[4].grades[0] = 5;
	students[4].grades[1] = 5;
	students[4].grades[2] = 5;
	students[4].grades[3] = 5;
	students[4].grades[4] = 5;
	students[4].grades[5] = 5;
	students[4].grades[6] = 5;
	students[4].grades[7] = 5;

	//6 студент
	students[5].full_name = "Жанна Фриски";
	students[5].sex = "W";
	students[5].group = 2121;
	students[5].id = 13;
	students[5].grades[0] = 4;
	students[5].grades[1] = 3;
	students[5].grades[2] = 3;
	students[5].grades[3] = 3;
	students[5].grades[4] = 4;
	students[5].grades[5] = 3;
	students[5].grades[6] = 4;
	students[5].grades[7] = 5;
	//7 студент
	students[6].full_name = "Ангелина Джоли";
	students[6].sex = "W";
	students[6].group = 2012;
	students[6].id = 15;
	students[6].grades[0] = 4;
	students[6].grades[1] = 4;
	students[6].grades[2] = 4;
	students[6].grades[3] = 4;
	students[6].grades[4] = 4;
	students[6].grades[5] = 5;
	students[6].grades[6] = 5;
	students[6].grades[7] = 5;
	//8 студент
	students[7].full_name = "Вин Дизель";
	students[7].sex = "M";
	students[7].group = 2777;
	students[7].id = 1;
	students[7].grades[0] = 5;
	students[7].grades[1] = 5;
	students[7].grades[2] = 5;
	students[7].grades[3] = 5;
	students[7].grades[4] = 5;
	students[7].grades[5] = 5;
	students[7].grades[6] = 5;
	students[7].grades[7] = 5;
	//9 студент
	students[8].full_name = "Лана Роудс";
	students[8].sex = "W";
	students[8].group = 2269;
	students[8].id = 12;
	students[8].grades[0] = 3;
	students[8].grades[1] = 3;
	students[8].grades[2] = 3;
	students[8].grades[3] = 4;
	students[8].grades[4] = 3;
	students[8].grades[5] = 4;
	students[8].grades[6] = 3;
	students[8].grades[7] = 5;
	//10 студент
	students[9].full_name = "Конор Макгрегор";
	students[9].sex = "M";
	students[9].group = 2373;
	students[9].id = 17;
	students[9].grades[0] = 4;
	students[9].grades[1] = 5;
	students[9].grades[2] = 5;
	students[9].grades[3] = 4;
	students[9].grades[4] = 4;
	students[9].grades[5] = 4;
	students[9].grades[6] = 5;
	students[9].grades[7] = 4;


	int task = 1;
	while (task)
	{
		printTask();
		cout << "Выбирете номер задания от 1-9: ";
		cin >> task;
		switch (task) {
		case 1: {
			Change(students);
			cout << endl;
			break;
		}
		case 2: {
			print(students);
			cout << endl;
			break;
		}
		case 3: {
			printGroup(students);
			cout << endl;
			break;
		}
		case 4: {
			printBestStudent(students);
			cout << endl;
			break;
		}
		case 5: {

			printMaleFemale(students);

			cout << endl;
			break;
		}
		case 6: {

			printOtchet(students);
			cout << endl;
			break;


		}
		case 7: {

			print_nomerStudenta(students);
			cout << endl;
			break;


		}




		}
	}
}
void printTask()
{

	cout << "1: внесение изменений в уже имеющуюся запись" << endl;
	cout << "2: вывод данных о студентах" << endl;
	cout << "3: Вывод информации обо всех студентах группы N. N – инициализируется пользователем" << endl;
	cout << "4: Вывод топа самых успешных студентов с наивысшим по рейтингу средним баллом за прошедшую сессию" << endl;
	cout << "5: Вывод количества студентов мужского и женского пола" << endl;
	cout << "6: Вывод данных о студентах, которые не получают стипендию; учатся только на «хорошо» и «отлично»; учатся только на «отлично»" << endl;
	cout << "7: Вывод данных о студентах, имеющих номер в списке – k" << endl;


}

void Change(struct Student* students)
{
	int numb;
	string parametr;
	bool yes, yes_1;
	do {
		cout << "Введите номер студента, у которого хотите поменять данные:";
		cin >> numb;
		do {
			cout << "Что вы хотите поменять(full_name/sex/group/id/grades)";
			cin >> parametr;
			if (parametr == "full_name")
			{
				cout << "Введите новое ФИО:";
				cin >> (students + numb)->full_name;
			}
			if (parametr == "sex")
			{
				cout << "Введите новый пол:";
				cin >> (students + numb)->sex;
			}
			if (parametr == "group")
			{
				cout << "Введите новую группу:";
				cin >> (students + numb)->group;
			}
			if (parametr == "id")
			{
				cout << "Введите новый id:";
				cin >> (students + numb)->id;
			}
			if (parametr == "grades")
			{
				cout << "Введите новые оценки:";
				for (int i = 0; i < 8; i++) {
					cin >> (students + numb)->grades[i];

				}
			}

			string yes_or_no;
			cout << "Хотите ли вы поменять что-то еще(yes/no)";
			cin >> yes_or_no;
			if (yes_or_no == "yes") {
				yes_1 = true;
			}
			else {
				yes_1 = false;
			}

		} while (yes_1);
		string yes_or_no;
		cout << "Хотите ли выбрать другого студента(yes/no)";
		cin >> yes_or_no;
		if (yes_or_no == "yes") {
			yes = true;
		}
		else {
			yes = false;
		}



	} while (yes);
}
void printStudent(struct Student* students, int i)
{
	cout << "ФИО:" << (students + i)->full_name << endl;
	cout << "Sex:" << (students + i)->sex << endl;
	cout << "Номер группы:" << (students + i)->group << endl;
	cout << "Номер в группе:" << (students + i)->id << endl;
	cout << "Оценки:";
	for (int j = 0; j < 8; j++)
	{
		cout << (students + i)->grades[j] << " ";

	}

}

void print(struct Student* students)
{
	for (int i = 0; i < SIZE; i++)
	{
		printStudent(students, i);



	}

}
void printGroup(struct Student* students)
{
	cout << "Введите номер группы,чтобы увидеть всех студентов этой группы:";
	int a;
	cin >> a;
	for (int i = 0; i < SIZE; i++)
	{
		if ((students + i)->group == a)
		{
			cout << "ФИО:" << (students + i)->full_name << endl;
			cout << "Sex:" << (students + i)->sex << endl;
			cout << "Номер группы:" << (students + i)->group << endl;
			cout << "Номер в группе:" << (students + i)->id << endl;
			cout << "Оценки:";
			for (int j = 0; j < 8; j++)
			{
				cout << (students + i)->grades[j] << " ";

			}

		}




	}



}

void printBestStudent(struct Student* students)
{

	int arr_grades[SIZE];
	int summGrade;
	double middle;
	for (int i = 0; i < SIZE; i++)
	{
		summGrade = 0;
		for (int j = 0; j < SIZE; j++)
		{
			summGrade = summGrade + (students + i)->grades[j];

		}
		middle = summGrade / 8;
		arr_grades[i] = middle;
	}
	int arr_numb[SIZE];
	for (int i = 0; i < SIZE; i++)
	{

		arr_numb[i] = i;

	}


	for (int i = 0; i < SIZE; i++)
	{
		for (int j = 0; j < SIZE - 1; j++)
		{
			if (arr_grades[i] > arr_grades[j + 1])
			{
				swap(arr_grades[i], arr_grades[j + 1]);
				swap(arr_numb[i], arr_numb[j + 1]);
			}
		}

	}

	for (int i = 1; i < 4; i++)
	{
		printStudent(students, arr_numb[i]);

		cout << endl;

	}


}
void printMaleFemale(struct Student* students)
{
	int M_count = 0;

	int W_count = 0;

	for (int i = 0; i < SIZE; i++)
	{

		if ((students + i)->sex == "M")
		{
			M_count = M_count + 1;


		}

		if ((students + i)->sex == "W")
		{

			W_count = W_count + 1;



		}





	}

	cout << "количество мужчин:" << M_count << endl;
	cout << "количество женщин:" << W_count << endl;





}

void printOtchet(struct Student* students)
{
	cout << "студенты,которые не получают стипендию:" << endl;
	for (int i = 0; i < SIZE; i++)
	{

		for (int j = 0; j < SIZE; j++) {
			if ((students + i)->grades[j] == 3)
			{
				printStudent(students, i);
				break;
			}

		}



	}

	cout << endl;
	cout << "студенты,которые учатся только на отлично:" << endl;
	for (int i = 0; i < SIZE; i++)
	{
		int otchnik_count = 0;





		for (int j = 0; j < 8; j++) {
			if (students[i].grades[j] == 5)
				otchnik_count = otchnik_count + 1;
			if (otchnik_count == 8) {
				printStudent(students, i);
				cout << "\n";
			}
		}
	}
	cout << endl;
	cout << "студенты,которые учатся только на отлично и на хорошо:" << endl;
	for (int i = 0; i < SIZE; i++)
	{
		int otchnik_count = 0;
		bool troika = 0;




		for (int j = 0; j < 8; j++) {
			if (students[i].grades[j] == 5)
				otchnik_count = otchnik_count + 1;
			if (students[i].grades[j] == 3)
				troika = 1;
		}
		if (!troika) {
			if (otchnik_count != 8) {
				printStudent(students, i);
				cout << "\n";
			}
		}
	}
	cout << endl;
}
void print_nomerStudenta(struct Student* students)
{
	int ID;
	cout << "Введите номер студента ,о котором хотите увидеть информацию:";

	cin >> ID;
	cout << "номер студента:" << ID << endl;
	for (int i = 0; i < SIZE; i++)
	{
		if ((students + i)->id == ID)

			printStudent(students, i);






     }














}


void Lab2()
{





    

    
    
        srand(time(0));
        list l;
        int tnum;


        do
        {

            cout << "Введите номер задания(1/2/3/4 (5/6 ИДЗ)) и 0-закончить выполнение:";
            cin >> tnum;
            switch (tnum)
            {
            case 1:
                l = task1();
                break;

            case 2:
                l = task1();
                break;

            case 3:
                task3(l);
                break;

            case 4:
                task3(l);
                break;
            case 5:
                bublesort(l);
                break;
            case 6:
                int* arr = createDynArr();
                delete[] arr;
                break;
            }


        } while (tnum);
     


    }


    list task1()
    {

        list l;
        int num;
        cout << "Выбирете тип заполнения списка: (1-авто 2-вручную): " << endl;
        cin >> num;
        switch (num)
        {
        case 1:
            l = task1a();
            break;
        case 2:
            l = task1b();
            break;


        }

        return l;


    }

    list task1a()
    {

        list l_a;
        cout << "Введите кол-во элементов в списке:";
        int size;
        cin >> size;
        auto start = system_clock::now(); //
        for (int i = 0; i < size; i++) {
            l_a.pushBack(rand() % 99);
        }
        auto end = system_clock::now(); //
        auto result = duration_cast<nanoseconds>(end - start); //
        cout << "Время затраченное на создание двусвязного списка - " << result.count() << " наносекунд." << endl; //
        cout << "Готовый список:" << endl;
        l_a.printForward();
        return l_a;


    }

    list task1b()
    {
        list l_b;
        cout << "Вводите элементы списка:" << endl;
        int val;
        int amount = 0; //
        do {
            cin >> val;
            auto start = system_clock::now(); //
            l_b.pushBack(val);
            auto end = system_clock::now(); //
            auto result = duration_cast<nanoseconds>(end - start); //
            amount += result.count(); //
        } while (val != 0);
        cout << "Время затраченное на создание двусвязного списка - " << amount << " наносекунд." << endl; //
        cout << "Готовый список:" << endl;
        l_b.printForward();
        return l_b;
    }

    list task3(list l) {
        int count;
        do {
            cout << "Выберите действие (1 - вставка; 2 - удаление; 3 - обмен; 4 - получение; 0 - закончить): ";
            cin >> count;
            if (count == 1) {
                int number;
                cout << "Введите число: ";
                cin >> number;
                auto start1 = system_clock::now(); //
                l.pushBack(number);
                auto end1 = system_clock::now(); //
                auto result1 = duration_cast<nanoseconds>(end1 - start1); //
                cout << "Время затраченное на вставку - " << result1.count() << " наносекунд." << endl; //
                cout << "Число " << number << " добавлено в конец списка. Новый список:" << endl;
                l.printForward();
            }
            else if (count == 2) {
                cout << "Выберите действие (1 - удаление по индексу; 2 - удаление по значению): ";
                int count2;
                cin >> count2;
                if (count2 == 1) {
                    int ind;
                    cout << "Введите индекс (нумерация начинается с 0): ";
                    cin >> ind;
                    auto start21 = system_clock::now(); //
                    l.removeInd(ind);
                    auto end21 = system_clock::now(); //
                    auto result21 = duration_cast<nanoseconds>(end21 - start21); //
                    cout << "Время затраченное на удаление - " << result21.count() << " наносекунд." << endl; //
                }
                else if (count2 == 2) {
                    int val;
                    cout << "Введите значение: ";
                    cin >> val;
                    auto start22 = system_clock::now(); //
                    l.removeVal(val);
                    auto end22 = system_clock::now(); //
                    auto result22 = duration_cast<nanoseconds>(end22 - start22); //
                    cout << "Время затраченное на удаление - " << result22.count() << " наносекунд." << endl; //
                }
            }
            else if (count == 3) {
                cout << "Введите индексы (нумерация начинается с 0): ";
                int ind1, ind2;
                cin >> ind1;
                cin >> ind2;
                auto start3 = system_clock::now(); //
                l.swap(ind1, ind2);
                auto end3 = system_clock::now(); //
                auto result3 = duration_cast<nanoseconds>(end3 - start3); //
                cout << "Время затраченное на обмен - " << result3.count() << " наносекунд." << endl; //
                cout << "Новый список:" << endl;
                l.printForward();
            }
            else if (count == 4) {
                cout << "Выберите действие (1 - получение по индексу; 2 - получение по значению): ";
                int count4;
                cin >> count4;
                if (count4 == 1) {
                    int ind;
                    cout << "Введите индекс (нумерация начинается с 0): ";
                    cin >> ind;
                    auto start41 = system_clock::now(); //
                    l.get_ind(ind);
                    auto end41 = system_clock::now(); //
                    auto result41 = duration_cast<nanoseconds>(end41 - start41); //
                    cout << "Время затраченное на получение - " << result41.count() << " наносекунд." << endl; //
                }
                else if (count4 == 2) {
                    int val;
                    cout << "Введите значение: ";
                    cin >> val;
                    auto start42 = system_clock::now(); //
                    l.get_val(val);
                    auto end42 = system_clock::now(); //
                    auto result42 = duration_cast<nanoseconds>(end42 - start42); //
                    cout << "Время затраченное на получение - " << result42.count() << " наносекунд." << endl; //
                }
            }
        } while (count == 1 || count == 2 || count == 3 || count == 4);
        return l;
    }

    //IDZ


    list bublesort(list l)
    {


        list l_a;
        cout << "Введите кол-во элементов в списке:";
        int size;

        cin >> size;
        for (int i = 0; i < size; i++) {
            l_a.pushBack(rand() % 99);
        }



        Node* left = l_a.first;
        Node* right = l_a.first->next;



        auto start = system_clock::now(); //

        while (left->next) {
            while (right) {
                if ((left->val) > (right->val)) {
                    swap(left->val, right->val);

                }
                right = right->next;

            }
            left = left->next;
            right = left->next;



        }













        /*  for (int i=0; i <size-1; i++)
          {
              Node* ptr1 = l_a.first;
              for (int j = 0; j < size -i- 1; j++)
              {

                  if (ptr1->val > ptr1->next->val)
                     l_a.swap(i,j );
                  ptr1 = ptr1->next;


              }
              ptr = ptr->next;

          }*/

        auto end = system_clock::now(); //
        auto result = duration_cast<nanoseconds>(end - start); //
        cout << "Время затраченное на сортировку двусвязного списка - " << result.count() << " наносекунд." << endl; //
        cout << "Готовый список:" << endl;
        l_a.printForward();
        return l_a;



    }



    int* createDynArr() {
        int size = 0;
        int* arr = new int[size];



        cout << "Введите количество элементов в массиве: ";
        cin >> size;
        int* rez = new int[size];
        arr = rez;
        for (int i = 0; i < size; i++) {
            *(arr + i) = rand() % 99;
        }

        auto start = system_clock::now(); //


        for (int i = 0; i < size - 1; i++) {
            for (int j = 0; j < size - i - 1; j++) {
                if (arr[j] > arr[j + 1]) {
                    // меняем элементы местами
                    swap(arr[j], arr[j + 1]);
                }
            }
        }


        auto end = system_clock::now(); //
        auto result = duration_cast<nanoseconds>(end - start); //
        cout << "Время затраченное на сортировку динамического массива - " << result.count() << " наносекунд." << endl; //


        // Вывод отсортированного массива на экран
        cout << "Новый массив:" << endl;
        for (int i = 0; i < size; i++) {
            cout << arr[i] << " ";
        }
        cout << endl;


        return arr;

    }
    /* if (act == 2) {
        cout << "Вводите элементы массива:" << endl;
        int val;
        auto start = system_clock::now(); //
        while (cin >> val) {
            size += 1;
            int* rez = new int[size];
            for (int i = 0; i < size - 1; i++) {
                rez[i] = arr[i];
            }
            delete[] arr;
            arr = rez;
            *(arr + size - 1) = val;
        }
        cout << "Новый массив:" << endl;
        for (int i = 0; i < size; i++) {
            cout << *(arr + i) << " ";
        }
        сout << endl;
        delete[] arr;
        auto end = system_clock::now(); //
        auto result = duration_cast<nanoseconds>(end - start); //
        cout << "Время затраченное на сортировку динамического массива - " << result.count() << " наносекунд." << endl; //


    }
    return arr; */





void Lab3()
{


	srand(time(0));
	setlocale(LC_ALL, "Russian");


	string infix, prefix, postfix;
	int infix_c, prefix_c, postfix_c;
	int task = 1;
	do {
		cout << "\t1) Ввести инфиксную форму;\n\t2) Посчитать инфиксную форму;\n\t3) Преобразовать в ОПЗ;\n\t4) Посчитать ОПЗ;\n\t5) Преобразовать в ПЗ;\n\t6) Посчитать ПЗ;\n\nВыберите задание: ";
		cin >> task;
		switch (task) {
		case 1:
			if (infix.size() == 0) {
				cout << "Введите инфиксное выражение:" << endl;
				cin.get();
				getline(cin, infix);
				cout << endl;
			}
			else {
				string new_infix;
				cout << "Введите инфиксное выражение или оставьте предыдущее выражение нажатием Enter:" << endl;
				cin.get();
				getline(cin, new_infix);
				cout << endl;
				if (new_infix.size() != 0) {
					infix = new_infix;
				}
			}
			break;
		case 2:
			if (infix.size() == 0) {
				cout << "Для начала выполните пункт 1." << endl << endl;
			}
			else {
				infix_c = calc(infix);
				cout << "Выражение равно " << infix_c << "." << endl << endl;
			}
			break;
		case 3:
			if (infix.size() == 0) {
				cout << "Для начала выполните пункт 1." << endl << endl;
			}
			else {
				postfix = RPN(infix);
				cout << endl;
			}
			break;
		case 4:
			if (postfix.size() == 0) {
				cout << "Для начала выполните пункт 3." << endl << endl;
			}
			else {
				postfix_c = calcRPN(postfix);
				cout << "Выражение равно " << postfix_c << "." << endl << endl;
			}
			break;
		case 5:
			if (infix.size() == 0) {
				cout << "Для начала выполните пункт 1." << endl << endl;
			}
			else {
				prefix = PN(infix);
				cout << endl;
			}
			break;
		case 6:
			if (prefix.size() == 0) {
				cout << "Для начала выполните пункт 5." << endl << endl;
			}
			else {
				prefix_c = calcPN(prefix);
				cout << "Выражение равно " << prefix_c << "." << endl << endl;
			}
			break;
		default:
			cout << "Работа программы прекращена." << endl;
			task = 0;
		}
	} while (task != 0);


	



















 }


















	
